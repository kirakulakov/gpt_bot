import asyncio
import logging
import re
from concurrent.futures import ThreadPoolExecutor

import g4f
import telebot
from g4f import Model

logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

API_TOKEN = '6368893890:AAFxIMeQ_o3ovj-z-WtviJDJWYB5aAOPEpE'

bot = telebot.TeleBot(API_TOKEN)


@bot.message_handler(commands=['start'])
def send_welcome(message):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    first_name = message.from_user.first_name
    logger.info(f"Received /start command from [ID: {message.from_user.id}], [first_name: {first_name}]")

    if first_name:
        greeting = f"–ü—Ä–∏–≤–µ—Ç, <b>{first_name}</b>! –†–∞–¥ —Å —Ç–æ–±–æ–π –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –Ø —Ç–≤–æ–π —É–º–Ω—ã–π <b>AI</b>-–ø–æ–º–æ—â–Ω–∏–∫. –ú–æ–∂–µ—à—å –∑–∞–¥–∞–≤–∞—Ç—å –º–Ω–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã!"
    else:
        greeting = f"–ü—Ä–∏–≤–µ—Ç! –†–∞–¥ —Å —Ç–æ–±–æ–π –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –Ø —Ç–≤–æ–π —É–º–Ω—ã–π <b>AI</b>-–ø–æ–º–æ—â–Ω–∏–∫. –ú–æ–∂–µ—à—å –∑–∞–¥–∞–≤–∞—Ç—å –º–Ω–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã!"

    bot.send_message(message.chat.id, greeting, parse_mode='HTML')


@bot.message_handler(commands=['help'])
def send_help(message):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    first_name = message.from_user.first_name
    logger.info(f"Received /help command from [ID: {message.from_user.id}], [first_name: {first_name}]")

    help_message = f"–Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –±–ª–∞–≥–æ–¥–∞—Ä—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º <b>OpenAI</b> –∏ –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π –º–æ–¥–µ–ª–∏ <b>GPT-3.5 turbo16k</b>.\n–ú–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ–≥–∞—Ç—å —Ç–µ–±–µ, –æ—Ç–≤–µ—á–∞—è –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å.\n\n–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞/–∫–æ–Ω—Ç—Ä–∏–±—å—é—Ç–∏–Ω–≥–∞: @kirakulakov."

    bot.send_message(message.chat.id, help_message, parse_mode='HTML')

def contains_no_chinese_or_japanese_characters(text):
    pattern = r'^[^\u3000-\u303F\u3040-\u309F\u30A0-\u30FF\u3400-\u4DBF\u4E00-\u9FFF\uF900-\uFAFF\uFF00-\uFFEF]*$'
    return re.match(pattern, text) is not None

async def ask_gpt_do(p: str, model: Model) -> str | None:
    _content = '–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û: –æ—Ç–≤–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ!\n' + p + '\n –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û: –æ—Ç–≤–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ!'
    max_attempts = 15
    attempt = 0
    while attempt < max_attempts:
        try:
            response = await g4f.ChatCompletion.create_async(
                model=model,
                messages=[{"role": "user", "content": _content}],
            )
            if response:
                if isinstance(response, str):
                    if contains_no_chinese_or_japanese_characters(response):
                        return response
            else:
                attempt += 1
                await asyncio.sleep(0.2)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ GPT: {e}")
            attempt += 1
            await asyncio.sleep(0.2)

    return None  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–¥–µ–∫–≤–∞—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç


async def ask_gpt_first_completed(message):
    print('in ask_gpt_first_completed')

    tasks = [asyncio.create_task(ask_gpt_do(p=message.text, model=g4f.models.gpt_35_turbo_16k)) for _ in range(1)]
    tasks.extend([asyncio.create_task(ask_gpt_do(p=message.text, model=g4f.models.default)) for _ in range(1)])
    tasks.extend([asyncio.create_task(ask_gpt_do(p=message.text, model=g4f.models.gpt_35_long)) for _ in range(1)])
    tasks.extend([asyncio.create_task(ask_gpt_do(p=message.text, model=g4f.models.gpt_35_turbo)) for _ in range(1)])
    tasks.extend([asyncio.create_task(ask_gpt_do(p=message.text, model=g4f.models.gpt_35_turbo_16k_0613)) for _ in range(1)])

    done, pending = await asyncio.wait(tasks, return_when=asyncio.FIRST_COMPLETED)

    for task in pending:
        task.cancel()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–≤–æ–π –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
    if done:
        return done.pop().result()
    return None

def _answer_prepare(message) -> int:
    print('in _answer_prepare')
    logger.info(f"Get message from: [ID {message.from_user.id}] [MESSAGE: {message.text}]")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –µ–≥–æ message_id
    processing_message = bot.send_message(message.chat.id,
                                          '<i>–£–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üîÆ\n\n–û–±—ã—á–Ω–æ –º–Ω–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—Å–µ–≥–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥, –Ω–æ –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–ª—É—á–∞—è—Ö —á—É—Ç—å –±–æ–ª—å—à–µ üí´</i>',
                                          parse_mode='HTML')

    message_id_to_delete = processing_message.message_id

    bot.send_chat_action(message.chat.id, 'typing')
    print('end _answer_prepare')
    return message_id_to_delete

@bot.message_handler(func=lambda message: True)
def answer(message):
    with ThreadPoolExecutor() as executor:
        future_gpt = executor.submit(_answer_prepare, message)
        future_gpt_2 = executor.submit(asyncio.run, ask_gpt_first_completed(message=message))
        message_id_to_delete = future_gpt.result()
        res = future_gpt_2.result()

    # message_id_to_delete = _answer_prepare(message=message)
    # res = asyncio.run(ask_gpt_first_completed(message=message))

    with ThreadPoolExecutor() as executor:
        future_gpt = executor.submit(bot.delete_message, chat_id=message.chat.id, message_id=message_id_to_delete)
        if res:
            future_gpt_2 = executor.submit(bot.reply_to, message, res)
        else:
            future_gpt_2 = executor.submit(bot.reply_to, message, "–ò–∑–≤–∏–Ω–∏, –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–≤–æ–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.")

        future_gpt.result()
        future_gpt_2.result()


    # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    # bot.delete_message(chat_id=message.chat.id, message_id=message_id_to_delete)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
    # if res:
    #     bot.reply_to(message, res)
    # else:
    #     bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏, –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–≤–æ–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.")

    logger.info(f"Send response to: [ID {message.from_user.id}] MES: [{res}]")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling()
