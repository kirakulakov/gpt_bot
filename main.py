import logging
import time

import g4f
import telebot

logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

API_TOKEN = '6368893890:AAFxIMeQ_o3ovj-z-WtviJDJWYB5aAOPEpE'

bot = telebot.TeleBot(API_TOKEN)


# '/start' –∏ '/help'
@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    first_name = message.from_user.first_name
    logger.info(f"Received /start or /help command from [ID: {message.from_user.id}], [first_name: {first_name}]")

    if first_name:
        greeting = f"–ü—Ä–∏–≤–µ—Ç, <b>{first_name}</b>! –†–∞–¥ —Å —Ç–æ–±–æ–π –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –Ø —Ç–≤–æ–π —É–º–Ω—ã–π <b>AI</b>-–ø–æ–º–æ—â–Ω–∏–∫. –ú–æ–∂–µ—à—å –∑–∞–¥–∞–≤–∞—Ç—å –º–Ω–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã!"
    else:
        greeting = f"–ü—Ä–∏–≤–µ—Ç! –†–∞–¥ —Å —Ç–æ–±–æ–π –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –Ø —Ç–≤–æ–π —É–º–Ω—ã–π <b>AI</b>-–ø–æ–º–æ—â–Ω–∏–∫. –ú–æ–∂–µ—à—å –∑–∞–¥–∞–≤–∞—Ç—å –º–Ω–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã!"

    bot.send_message(message.chat.id, greeting, parse_mode='HTML')


def ask_gpt(p: str) -> str | None:
    p = p + '\n –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û: –æ—Ç–≤–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ!'
    max_attempts = 15
    attempt = 0
    while attempt < max_attempts:
        try:
            response = g4f.ChatCompletion.create(
                model=g4f.models.gpt_35_turbo_16k,
                messages=[{"role": "user", "content": p}],
            )  # Alternative model setting

            if isinstance(response, str):
                return response
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ GPT: {e}")
            attempt += 1
            time.sleep(0.3)

    return None  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–¥–µ–∫–≤–∞—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç


@bot.message_handler(func=lambda message: True)
def echo_all(message):
    logger.info(f"Get message from: [ID {message.from_user.id}] [MESSAGE: {message.text}]")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –µ–≥–æ message_id
    processing_message = bot.send_message(message.chat.id,
                                          '<i>–£–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üîÆ\n\n–û–±—ã—á–Ω–æ –º–Ω–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—Å–µ–≥–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥, –Ω–æ –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–ª—É—á–∞—è—Ö —á—É—Ç—å –±–æ–ª—å—à–µ üí´</i>',
                                          parse_mode='HTML')

    # message_id_to_delete = processing_message.message_id

    bot.send_chat_action(message.chat.id, 'typing')

    res = ask_gpt(message.text)

    # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    # bot.delete_message(chat_id=message.chat.id, message_id=message_id_to_delete)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
    if res:
        bot.reply_to(message, res)
    else:
        bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏, –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–≤–æ–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.")

    logger.info(f"Send response to: [ID {message.from_user.id}] MES: [{res}]")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(skip_pending=True)
