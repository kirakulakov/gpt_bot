import asyncio
import logging
import random
import re
import sqlite3
from concurrent.futures import ThreadPoolExecutor

import g4f
import telebot
from g4f import Model, Messages
from g4f.Provider import ChatBase as provider
from g4f.models import gpt_4
from telebot import types
message_id_to_count_regenerate = {}

db_path = 'bot_messages.db'
conn = sqlite3.connect(db_path)

cursor = conn.cursor()

# –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏–π
cursor.execute('''
    CREATE TABLE IF NOT EXISTS messages_from_user (
        message_id INTEGER PRIMARY KEY,
        user_id INTEGER NOT NULL,
        text TEXT,
        date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
''')

cursor.execute('''
    CREATE TABLE IF NOT EXISTS messages_from_bot_v2 (
        message_id INTEGER PRIMARY KEY,
        text TEXT,
        question_from_user TEXT,
        date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
''')


logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

API_TOKEN = '6368893890:AAFxIMeQ_o3ovj-z-WtviJDJWYB5aAOPEpE'

bot = telebot.TeleBot(API_TOKEN)

GPT_MODELS = [
                 g4f.models.gpt_35_turbo_16k,
                 g4f.models.default,
                 g4f.models.gpt_35_long,
                 g4f.models.gpt_35_turbo,
                 g4f.models.gpt_35_turbo_16k_0613
             ] * 2


def get_message_declension(count):
    if 10 <= count % 100 <= 20:
        return '—Å–æ–æ–±—â–µ–Ω–∏–π'
    else:
        last_digit = count % 10
        if last_digit == 1:
            return '—Å–æ–æ–±—â–µ–Ω–∏–µ'
        elif 2 <= last_digit <= 4:
            return '—Å–æ–æ–±—â–µ–Ω–∏—è'
        else:
            return '—Å–æ–æ–±—â–µ–Ω–∏–π'


@bot.message_handler(commands=['history'])
def handle_history(message):
    user_id = message.from_user.id  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç–ø—Ä–∞–≤–∏–≤—à–µ–≥–æ –∫–æ–º–∞–Ω–¥—É

    with sqlite3.connect(db_path) as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT text FROM messages_from_user WHERE user_id = ? ORDER BY date DESC LIMIT 20', (user_id,))
        messages = cursor.fetchall()

    if messages:
        response = "\n\n" + "\n".join("- " + msg[0] for msg in messages)
    else:
        response = "–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø—É—Å—Ç–∞."

    bot.send_message(message.chat.id, response, parse_mode='HTML')


@bot.message_handler(commands=['count'])
def count_messages(message):
    user_id = message.from_user.id  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç–ø—Ä–∞–≤–∏–≤—à–µ–≥–æ –∫–æ–º–∞–Ω–¥—É

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–¥—Å—á–µ—Ç–∞
    with sqlite3.connect(db_path) as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT COUNT(*) FROM messages_from_user WHERE user_id = ?', (user_id,))
        count = cursor.fetchone()[0]  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π

    message_word = get_message_declension(count)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–∫–ª–æ–Ω–µ–Ω–∏–µ–º
    bot.send_message(message.chat.id, f"–¢—ã –æ—Ç–ø—Ä–∞–≤–∏–ª(–∞) –º–Ω–µ {count} {message_word}.")


@bot.message_handler(commands=['start'])
def send_welcome(message):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    first_name = message.from_user.first_name
    logger.info(f"Received /start command from [ID: {message.from_user.id}], [first_name: {first_name}]")

    if first_name:
        greeting = f"–ü—Ä–∏–≤–µ—Ç, <b>{first_name}</b>! –†–∞–¥ —Å —Ç–æ–±–æ–π –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!\n–Ø —Ç–≤–æ–π —É–º–Ω—ã–π <b>AI-–ø–æ–º–æ—â–Ω–∏–∫</b>. –ú–æ–∂–µ—à—å –∑–∞–¥–∞–≤–∞—Ç—å –º–Ω–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã!"
    else:
        greeting = f"–ü—Ä–∏–≤–µ—Ç! –†–∞–¥ —Å —Ç–æ–±–æ–π –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!\n–Ø —Ç–≤–æ–π —É–º–Ω—ã–π <b>AI-–ø–æ–º–æ—â–Ω–∏–∫</b>. –ú–æ–∂–µ—à—å –∑–∞–¥–∞–≤–∞—Ç—å –º–Ω–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã!"

    bot.send_message(message.chat.id, greeting, parse_mode='HTML')


@bot.message_handler(commands=['help'])
def send_help(message):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    first_name = message.from_user.first_name
    logger.info(f"Received /help command from [ID: {message.from_user.id}], [first_name: {first_name}]")

    help_message = (
        f"–Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –±–ª–∞–≥–æ–¥–∞—Ä—è –ø–æ—Å–ª–µ–¥–Ω–∏–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º <b>OpenAI</b>.\n"
        f"–ú–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ–≥–∞—Ç—å —Ç–µ–±–µ, –æ—Ç–≤–µ—á–∞—è –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å.\n\n\n"
        f"<i>from</i> @kirakulakov"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.send_message(chat_id=message.chat.id, text=help_message, parse_mode='HTML')


def contains_no_chinese_or_japanese_characters(text):
    pattern = r'^[^\u3000-\u303F\u3040-\u309F\u30A0-\u30FF\u3400-\u4DBF\u4E00-\u9FFF\uF900-\uFAFF\uFF00-\uFFEF]*$'
    return re.match(pattern, text) is not None

_providers = [
        g4f.Provider.GPTalk,
        g4f.Provider.RetryProvider,
        g4f.Provider.ChatBase,
        g4f.Provider.GptForLove,
        g4f.Provider.Hashnode,
        g4f.Provider.BaseProvider

    ]
async def ask_gpt_do(p: str, model: Model) -> str | None:
    _content = '–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û: –æ—Ç–≤–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –∏ —Å–æ–±–µ—Ä–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω—É—é, –ø–æ–¥—Ä–æ–±–Ω—É—é –∏ –ø—Ä–∞–≤–¥–∏–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é! –í —Å–≤–æ–µ–º –æ—Ç–≤–µ—Ç–µ –≤ –±–æ–ª—å—à–µ–π —á–∞—Å—Ç–∏ –æ–ø–∏—Ä–∞–π—Å—è –Ω–∞ –Ω–∞—É—á–Ω–æ-–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ñ–∞–∫—Ç—ã –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!\n' + p + '\n –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û: –æ—Ç–≤–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –∏ —Å–æ–±–µ—Ä–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω—É—é, –ø–æ–¥—Ä–æ–±–Ω—É—é –∏ –ø—Ä–∞–≤–¥–∏–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é! –í —Å–≤–æ–µ–º –æ—Ç–≤–µ—Ç–µ –≤ –±–æ–ª—å—à–µ–π —á–∞—Å—Ç–∏ –æ–ø–∏—Ä–∞–π—Å—è –Ω–∞ –Ω–∞—É—á–Ω–æ-–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ñ–∞–∫—Ç—ã –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!'
    # _content = '–û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫—Ä–∞—Ç–∫–æ, –±—ã—Å—Ç—Ä–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ, –≤–æ–ø—Ä–æ—Å --> ' + p
    # _content = '–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞–π–¥–∏ –∑–æ–ª–æ—Ç—É—é —Å–µ—Ä–µ–¥–∏–Ω—É –º–µ–∂–¥—É –∫—Ä–∞—Ç–∫–æ—Å—Ç—å—é, –±—ã—Å—Ç—Ä–æ—Ç–æ–π, –∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ—Å—Ç—å—é –æ—Ç–≤–µ—Ç–∞, –∏—Ç–∞–∫ –≤–æ–ø—Ä–æ—Å –∑–≤—É—á–∏—Ç —Ç–∞–∫: --> ' + p
    max_attempts = 15
    attempt = 0

    while attempt < max_attempts:
        try:
            response = await g4f.ChatCompletion.create_async(
                model=model,
                messages=[{"role": "user", "content": _content}]
            )
            if response:
                if isinstance(response, str):
                    if contains_no_chinese_or_japanese_characters(response):
                        if response != "I'm sorry, but I can only provide information and answer questions related to Chatbase." and response != ["I'm sorry, but I can only provide information and answer questions related to Chatbase."]:
                            return response
            else:
                attempt += 1
                # await asyncio.sleep(0.2)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ GPT: {e}")
            attempt += 1
            # await asyncio.sleep(0.2)

    return None  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–¥–µ–∫–≤–∞—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç


async def ask_gpt_first_completed(message):
    if isinstance(message, str):
        tasks = [asyncio.create_task(ask_gpt_do(p=message, model=model)) for model in GPT_MODELS]
    else:
        tasks = [asyncio.create_task(ask_gpt_do(p=message.text, model=model)) for model in GPT_MODELS]

    done, pending = await asyncio.wait(tasks, return_when=asyncio.FIRST_COMPLETED)

    for task in pending:
        task.cancel()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–≤–æ–π –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
    if done:
        return done.pop().result()
    return None


def _answer_prepare(message) -> int:
    logger.info(f"Get message from: [ID {message.from_user.id}] [NAME: {message.from_user.first_name}] [MESSAGE: {message.text}]")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –µ–≥–æ message_id
    processing_message = bot.send_message(message.chat.id,
                                          '<i>–£–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üîÆ\n\n–û–±—ã—á–Ω–æ –º–Ω–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—Å–µ–≥–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥, –Ω–æ –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–ª—É—á–∞—è—Ö —á—É—Ç—å –±–æ–ª—å—à–µ üí´</i>',
                                          parse_mode='HTML')

    message_id_to_delete = processing_message.message_id

    bot.send_chat_action(message.chat.id, 'typing')
    return message_id_to_delete


def save_to_db(message):
    with sqlite3.connect(db_path) as conn:
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO messages_from_user (message_id, user_id, text, chat_id) VALUES (?, ?, ?, ?)
        ''', (message.id, message.from_user.id, message.text, message.chat.id))
        conn.commit()

def save_to_db_from_bot(message, question_from_user):
    with sqlite3.connect(db_path) as conn:
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO messages_from_bot_v2 (message_id, text, question_from_user) VALUES (?, ?, ?)
        ''', (message.id, message.text, question_from_user.text))
        conn.commit()



@bot.message_handler(func=lambda message: True)
def answer(message):
    btn_retry = str('\U0001F504')
    inline_markup = types.InlineKeyboardMarkup(row_width=2)
    buttons = [
        types.InlineKeyboardButton(btn_retry, callback_data=btn_retry),
    ]
    inline_markup.add(*buttons)

    mess_from_user = message

    with ThreadPoolExecutor() as executor:
        save_to_db_future = executor.submit(save_to_db, message)
        answer_prepare_future = executor.submit(_answer_prepare, message)
        ask_gpt_first_completed_future = executor.submit(asyncio.run, ask_gpt_first_completed(message=message))

        save_to_db_future.result()
        message_id_to_delete = answer_prepare_future.result()
        res = ask_gpt_first_completed_future.result()

    # message_id_to_delete = _answer_prepare(message=message)
    # res = asyncio.run(ask_gpt_first_completed(message=message))

    with ThreadPoolExecutor() as executor:
        delete_message_future = executor.submit(bot.delete_message, chat_id=message.chat.id,
                                                message_id=message_id_to_delete)
        if res:
            reply_result_future = executor.submit(bot.reply_to, message, res, reply_markup=inline_markup, parse_mode='Markdown')
        else:
            reply_result_future = executor.submit(bot.reply_to, message,
                                                  "–ò–∑–≤–∏–Ω–∏, –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–≤–æ–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.", reply_markup=inline_markup)

        delete_message_future.result()
        message_from_bot = reply_result_future.result()

    if res:
        with ThreadPoolExecutor() as executor:
            save_to_db_future = executor.submit(save_to_db_from_bot, message_from_bot, mess_from_user)
            save_to_db_future.result()

    # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    # bot.delete_message(chat_id=message.chat.id, message_id=message_id_to_delete)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
    # if res:
    #     bot.reply_to(message, res)
    # else:
    #     bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏, –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–≤–æ–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.")

    logger.info(f"Send response to: [ID {message.from_user.id}] MES: [{res}]")


@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):

    btn_retry = str('\U0001F504')
    inline_markup = types.InlineKeyboardMarkup(row_width=2)
    buttons = [
        types.InlineKeyboardButton(btn_retry, callback_data=btn_retry),
    ]
    inline_markup.add(*buttons)

    chat_id = call.message.chat.id
    message_id = call.message.message_id

    if not message_id in message_id_to_count_regenerate:
        message_id_to_count_regenerate[message_id] = 1
    else:
        message_id_to_count_regenerate[message_id] += 1

    if call.data == '\U0001F504':
        bot.answer_callback_query(call.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏: –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç")

        user_id = call.from_user.id

        # with sqlite3.connect(db_path) as conn:
        #     cursor = conn.cursor()
        #     cursor.execute('SELECT chat_id FROM messages_from_user WHERE user_id = ? ORDER BY date DESC LIMIT 1',
        #                    (user_id,))
        #     c = cursor.fetchall()
        #     print(c)

        with sqlite3.connect(db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT question_from_user FROM messages_from_bot_v2 WHERE message_id = ? ORDER BY date DESC LIMIT 1',
                           (message_id,))
            message_from_bot = cursor.fetchall()

        message = message_from_bot[0][0]


        with ThreadPoolExecutor() as executor:
            prepare = executor.submit(bot.send_chat_action, chat_id, 'typing')
            ask_gpt_first_completed_future = executor.submit(asyncio.run, ask_gpt_first_completed(message=message))

            res = ask_gpt_first_completed_future.result()
            prepare.result()

        edited_text = res + f'\n\n\n<b>[REGENERATED v.{message_id_to_count_regenerate[message_id]}]</b>'
        bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=edited_text, reply_markup=inline_markup, parse_mode='HTML')
        logger.info(f"Regenerate done [ID: {user_id}], [RESULT: {res[0:50]} ...]")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(long_polling_timeout=9999)
